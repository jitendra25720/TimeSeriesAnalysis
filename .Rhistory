accuracy(forecast_ma, df)
library(ggplot2)
library(tseries)
library(imputeTS)
library(forecast)
# library(greybox)
# library(smooth)
library(graphics)
library(datasets)
library(fpp2)
library(TTR)
#Importing data
data = read.csv("Data/tata_data.csv")
data
# Converting data into time-series object
df = ts(data$Sales, start = c(2001,4), frequency = 12)
df
plot(decompose(df))
#Decomposition of time series
df_decom = stl(df, s.window = "p")
autoplot(df_decom)
#Simple exponential smoothing method
df_ses = ses(df, h=12)
autoplot(df_ses)+ xlab("Time")+ ylab("Revenue")+theme(panel.background = element_rect(fill = "gray", colour = "red"), axis.text.x = element_text(colour = "blue"),axis.text.y = element_text(colour = "blue"), axis.title.x.bottom = element_text(colour = "red"), axis.title.y.left = element_text(color = "red"))
summary(df_ses)
#Double exponential exponential smoothing
df_dex = holt(df, h = 12)
df_dex
autoplot(df_dex)+ xlab("Time")+ ylab("Revenue")+theme(panel.background = element_rect(fill = "gray", colour = "red"), axis.text.x = element_text(colour = "blue"),axis.text.y = element_text(colour = "blue"), axis.title.x.bottom = element_text(colour = "red"), axis.title.y.left = element_text(color = "red"))
summary(df_dex)
# Triple(Hold Winter)exponential smoothing
df_hw = hw(df, h=12)
df_hw
autoplot(df_hw)+ xlab("Time")+ ylab("Revenue")+theme(panel.background = element_rect(fill = "gray", colour = "red"), axis.text.x = element_text(colour = "blue"),axis.text.y = element_text(colour = "blue"), axis.title.x.bottom = element_text(colour = "red"), axis.title.y.left = element_text(color = "red"))
summary(df_hw)
# Training and testing of data for holt-Winter
df_train = window(df,start = c(2013,4), end = c(2021,2), frequency = 12)
df_train
df_test = window(df, start = c(2021,3), frequency = 12)
df_test
df_hw_train = hw(df_train,h = 12)
df_hw_train
autoplot(df_hw_train)
accuracy(df_hw_train, df_test)
plot(df_hw_train)
lines(df_test)
summary(df_hw_train)
df_hw_train2 = hw(df_train, alpha = 0.62, beta = .02, gamma = .1, h=12)
plot(df_hw_train2)
lines(df_test)
lags = window(df, start = c(2006,4))
lags
gglagplot(lags)
ggAcf(lags)
#Checking stationarity of the data
#H0 : Data is not stationary
#H1 : Data is stationary
adf.test(df)
# First order diffrencing
df_diff = diff(df_train,1)
autoplot(df_diff)
adf.test(df_diff, alternative = "stationary" ,k=0)
autoarima.fit.train = auto.arima(df_diff, trace = FALSE, stationary = TRUE, ic="bic")
autoarima.fit.train
acf(df_diff)
pacf(df_diff)
auto_arima_train= auto.arima(df_train, ic="bic", trace = TRUE)
arima_forecast = forecast(auto_arima_train,h=12)
arima_forecast
plot(arima_forecast)
lines(df, col="red")
moving_avg = SMA(df_train,n = 3)
moving_avg
forecast_ma = forecast(moving_avg,h=12)
forecast_ma
plot(forecast_ma)
lines(df, col = "red")
accuracy(forecast_ma, df)
library(ggplot2)
library(tseries)
library(imputeTS)
library(forecast)
# library(greybox)
# library(smooth)
library(graphics)
library(datasets)
library(fpp2)
library(TTR)
#Importing data
data = read.csv("Data/tata_data.csv")
data
# Converting data into time-series object
df = ts(data$Sales, start = c(2001,4), frequency = 12)
df
plot(decompose(df))
#Decomposition of time series
df_decom = stl(df, s.window = "p")
autoplot(df_decom)
#Simple exponential smoothing method
df_ses = ses(df, h=12)
autoplot(df_ses)+ xlab("Time")+ ylab("Revenue")+theme(panel.background = element_rect(fill = "gray", colour = "red"), axis.text.x = element_text(colour = "blue"),axis.text.y = element_text(colour = "blue"), axis.title.x.bottom = element_text(colour = "red"), axis.title.y.left = element_text(color = "red"))
summary(df_ses)
#Double exponential exponential smoothing
df_dex = holt(df, h = 12)
df_dex
autoplot(df_dex)+ xlab("Time")+ ylab("Revenue")+theme(panel.background = element_rect(fill = "gray", colour = "red"), axis.text.x = element_text(colour = "blue"),axis.text.y = element_text(colour = "blue"), axis.title.x.bottom = element_text(colour = "red"), axis.title.y.left = element_text(color = "red"))
summary(df_dex)
# Triple(Hold Winter)exponential smoothing
df_hw = hw(df, h=12)
df_hw
autoplot(df_hw)+ xlab("Time")+ ylab("Revenue")+theme(panel.background = element_rect(fill = "gray", colour = "red"), axis.text.x = element_text(colour = "blue"),axis.text.y = element_text(colour = "blue"), axis.title.x.bottom = element_text(colour = "red"), axis.title.y.left = element_text(color = "red"))
summary(df_hw)
plot(df_hw_train)
length(data$Sales)
length(data$Sales)*0.8
length(data$Sales)
df_train = window(df,start = c(2013,4), end = c(2018,4), frequency = 12)
length(df_train)
df_train = window(df,start = c(2001,4), end = c(2018,4), frequency = 12)
length(df_train)
df_test
df_test = window(df, start = c(2021,3), frequency = 12)
df_test
df_train
df_test = window(df, start = c(2018,5), frequency = 12)
df_test
df_hw_train = hw(df_train,h = 12)
df_hw_train
autoplot(df_hw_train)
accuracy(df_hw_train, df_test)
length(df_test)
df_hw_train = hw(df_train,h = 47)
df_hw_train
autoplot(df_hw_train)
accuracy(df_hw_train, df_test)
plot(df_hw_train)
lines(df_test)
